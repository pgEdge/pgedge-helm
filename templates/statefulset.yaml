---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.pgEdge.appName }}
  labels: {{- include "pgedge.v0.labels" . | nindent 4 }}
  {{- if .Values.annotations }}
  annotations:
    {{- .Values.annotations | toYaml | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.pgEdge.nodeCount | int }}
  serviceName: {{ include "pgedge.v0.headlessSvcName" . }}
  selector:
    matchLabels: {{- include "pgedge.v0.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "pgedge.v0.matchLabels" . | nindent 8 }}
    spec:
      affinity: {{- include "pgedge.v0.affinity" . | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.pgEdge.terminationGracePeriodSeconds | int }}
      containers:
      - name: pgedge
        image: docker.io/pgedge/pgedge:{{ .Values.pgEdge.imageTag }}
        command: ["/home/pgedge/scripts/run-database.sh"]
        args: ["/home/pgedge/config/db.json", "/home/pgedge/secret/users.json"]
        {{- if .Values.pgEdge.resources }}
        resources: {{- .Values.pgEdge.resources | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.pgEdge.readinessProbe.enabled }}
        readinessProbe: {{ include "pgedge.v0.readinessProbe" . | nindent 10 }}
        {{- end }}
        {{- if .Values.pgEdge.livenessProbe.enabled }}
        livenessProbe: {{ include "pgedge.v0.livenessProbe" . | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.pgEdge.port }}
          name: postgres
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PGDATA
          value: /data/pgdata
        volumeMounts:
        - name: data
          mountPath: /data
        - name: db-json
          readOnly: true
          mountPath: /home/pgedge/config
        - name: users
          readOnly: true
          mountPath: /home/pgedge/secret
      volumes:
        - name: db-json
          configMap:
            name: {{ include "pgedge.v0.dbJsonName" . }}
        - name: users
          secret:
            secretName: {{ include "pgedge.v0.usersSecret" . }}
  {{- if .Values.storage.retentionPolicy.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.storage.retentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.storage.retentionPolicy.whenScaled }}
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      {{- if or .Values.annotations .Values.storage.annotations }}
      annotations:
        {{- if .Values.annotations }}
        {{- .Values.annotations | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.storage.annotations }}
        {{- .Values.storage.annotations | toYaml | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if or .Values.labels .Values.storage.labels }}
      labels: {{- include "pgedge.v0.labels" . | nindent 8 }}
        {{- if .Values.storage.labels }}
        {{- .Values.storage.labels | toYaml | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      accessModes: {{ .Values.storage.accessModes }}
      storageClassName: {{ .Values.storage.className }}
      {{- if .Values.storage.selector }}
      selector: {{- .Values.storage.selector | toYaml | nindent 8 }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.size }}
